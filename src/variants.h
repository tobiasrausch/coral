/*
============================================================================
Coral: COpy-numbeR ALterations
============================================================================
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
============================================================================
Contact: Tobias Rausch (rausch@embl.de)
============================================================================
*/

#ifndef VARIANTS_H
#define VARIANTS_H

#include <boost/unordered_map.hpp>
#include <boost/algorithm/string.hpp>
#include <htslib/sam.h>


namespace coralns
{

  const float expmafnocontrol[] = {0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4087316,0.4131712,0.4172245,0.4205128,0.4236532,0.4263210,0.4286688,0.4307152,0.4328837,0.4344543,0.4362868,0.4380312,0.4393727,0.4407450,0.4419172,0.4433548,0.4443526,0.4454079,0.4462235,0.4473154,0.4481268,0.4490067,0.4497467,0.4505702,0.4512066,0.4519941,0.4530562,0.4533654,0.4540119,0.4546830,0.4551344,0.4559093,0.4560630,0.4567296,0.4573710,0.4577973,0.4583083,0.4586759,0.4592804,0.4596284,0.4599488,0.4602597,0.4606602,0.4611208,0.4615586,0.4618485,0.4620011,0.4626524,0.4629447,0.4629900,0.4635631,0.4639815,0.4638577,0.4645119,0.4645317,0.4648210,0.4652183,0.4654348,0.4657771,0.4660092,0.4660736,0.4664326,0.4666366,0.4668185,0.4672072,0.4674022,0.4676163,0.4678251,0.4679415,0.4681746,0.4682736,0.4685674,0.4687759,0.4690409,0.4690307,0.4692766,0.4695501,0.4697960,0.4697312,0.4698318,0.4701142,0.4703454,0.4705216,0.4705771,0.4707991,0.4709915,0.4710869,0.4713304,0.4713030,0.4715521,0.4716744,0.4090050,0.4131325,0.4170061,0.4207924,0.4235106,0.4263117,0.4287562,0.4310013,0.4330316,0.4347266,0.4362490,0.4377920,0.4393961,0.4406287,0.4418252,0.4431463,0.4441768,0.4454125,0.4463684,0.4470650,0.4482681,0.4490927,0.4496852,0.4508229,0.4514908,0.4520476,0.4527908,0.4531589,0.4540817,0.4545425,0.4551844,0.4558667,0.4562692,0.4567121,0.4571978,0.4578329,0.4583373,0.4586683,0.4591534,0.4596045,0.4597142,0.4602708,0.4606548,0.4610446,0.4614234,0.4618025,0.4621973,0.4624599,0.4627681,0.4632710,0.4633143,0.4637138,0.4642168,0.4645486,0.4647650,0.4649507,0.4652557,0.4654152,0.4656180,0.4659109,0.4662219,0.4664085,0.4666125,0.4668989,0.4671582,0.4673736,0.4676255,0.4677785,0.4679577,0.4682624,0.4685458,0.4685489,0.4687077,0.4689167,0.4690623,0.4693259,0.4694886,0.4696558,0.4698313,0.4700016,0.4702504,0.4704413,0.4705765,0.4706899,0.4708934,0.4708930,0.4712066,0.4713178,0.4715350,0.4716714,0.4716115,0.4718670,0.4720044,0.4721273,0.4722762,0.4723077,0.4726448,0.4727013,0.4728277,0.4729104,0.4730636,0.4731224,0.4732879,0.4733540,0.4734877,0.4737267,0.4737491,0.4737883,0.4740012,0.4740046,0.4742167,0.4742836,0.4743752,0.4745891,0.4746950,0.4747455,0.4748176,0.4749935,0.4750827,0.4751267,0.4752236,0.4752381,0.4754146,0.4754547,0.4756565,0.4756060,0.4757552,0.4759159,0.4760620,0.4760126,0.4761625,0.4761775,0.4763021,0.4763111,0.4764995,0.4765009,0.4767878,0.4766071,0.4766781,0.4770026,0.4770115,0.4770963,0.4770875,0.4771278,0.4773305,0.4773358,0.4773636,0.4773196,0.4774917,0.4776525,0.4777385,0.4777875,0.4777431,0.4779398,0.4778824,0.4779442,0.4781380,0.4781368,0.4782823,0.4781763,0.4782931,0.4783609,0.4784749,0.4785252,0.4786346,0.4786663,0.4786655,0.4787104,0.4789143,0.4789517,0.4789516,0.4790441,0.4790146,0.4790978,0.4792562,0.4792433,0.4792746,0.4793246,0.4794797,0.4794596,0.4795162,0.4796068,0.4796596,0.4796633,0.4797886,0.4798413,0.4797620,0.4798794,0.4799819,0.4799144,0.4800539,0.4800898,0.4802005,0.4802031,0.4801727,0.4802893,0.4803664,0.4803783,0.4803698,0.4804983,0.4804949,0.4805879,0.4805973,0.4806666,0.4806918,0.4807619,0.4808115,0.4808057,0.4808676,0.4809382,0.4810134,0.4810789,0.4811082,0.4811244,0.4811862,0.4812043,0.4811603,0.4813020,0.4813372,0.4813550,0.4813919,0.4814195,0.4814792,0.4815306,0.4815853,0.4816838,0.4815732,0.4816688,0.4816620,0.4817029,0.4817578,0.4818678,0.4818598,0.4819099,0.4819816,0.4819876,0.4819911,0.4819796,0.4820981,0.4820667,0.4821484,0.4821368,0.4821993,0.4822822,0.4822437,0.4822692,0.4823274,0.4824706,0.4823945,0.4824354,0.4824599,0.4825833,0.4826097,0.4826193,0.4826659,0.4826377,0.4826849,0.4827916,0.4827485,0.4827726,0.4829031,0.4828042,0.4828369,0.4828787,0.4829618,0.4829976,0.4830218,0.4830313,0.4830538,0.4830977,0.4831541,0.4831482,0.4831932,0.4831887,0.4832530,0.4833566,0.4833332,0.4833007,0.4833787,0.4833804,0.4834725,0.4834379,0.4834917,0.4834536,0.4835367,0.4835646,0.4835842,0.4837443,0.4836333,0.4836723,0.4837265,0.4837285,0.4837641,0.4837963,0.4837858,0.4838251,0.4838418,0.4838835,0.4838795,0.4839729,0.4839439,0.4840238,0.4839836,0.4840657,0.4840458,0.4841088,0.4840581,0.4841476,0.4841198,0.4841889,0.4841908,0.4842620,0.4843132,0.4842196,0.4843867,0.4844189,0.4844322,0.4843869,0.4844221,0.4844339,0.4843688,0.4845108,0.4845148,0.4844842,0.4845986,0.4845534,0.4845845,0.4846977,0.4846324,0.4847110,0.4846150,0.4847253,0.4847395,0.4847285,0.4848058,0.4848758,0.4847746,0.4848480,0.4848982,0.4848893,0.4849453,0.4848989,0.4849506,0.4849698,0.4849849,0.4850601,0.4850945,0.4850609,0.4850735,0.4850736,0.4851301,0.4851616,0.4851570,0.4852242,0.4851974,0.4852421,0.4852531,0.4852270,0.4852525,0.4853358,0.4853265,0.4853641,0.4853642,0.4854287,0.4854287,0.4854418,0.4854018,0.4854737,0.4855004,0.4854657,0.4855150,0.4855348,0.4855864,0.4856608,0.4855716,0.4856604,0.4856291,0.4856299,0.4857350,0.4857527,0.4857317,0.4857230,0.4856991,0.4857358,0.4858218,0.4858365,0.4858021,0.4858209,0.4858629,0.4859319,0.4858885,0.4859658,0.4859572,0.4859053,0.4859593,0.4859936,0.4860253,0.4859820,0.4860154,0.4860381,0.4860721,0.4860650,0.4860809,0.4861043,0.4861285,0.4861215,0.4861949,0.4861510,0.4862038,0.4862160,0.4862115,0.4863069,0.4862984,0.4862871,0.4863060,0.4863223,0.4863377,0.4863059,0.4863108,0.4863795,0.4863640,0.4863834,0.4863749,0.4863752,0.4864796,0.4864285,0.4865189,0.4864580,0.4864398,0.4865514,0.4865107,0.4865812,0.4865486,0.4865846,0.4865772,0.4866081,0.4866316,0.4866611,0.4867298,0.4866670,0.4867441,0.4866450,0.4867040,0.4867772,0.4867318,0.4867614,0.4868257,0.4867929,0.4868206,0.4868447,0.4868208,0.4868878,0.4868770,0.4868144,0.4869250,0.4869151,0.4868918,0.4869387,0.4869517,0.4869549,0.4869355,0.4870064,0.4870099,0.4870170,0.4870785,0.4870349,0.4870957,0.4870169,0.4871382,0.4871251,0.4871331,0.4870988,0.4871676,0.4871893,0.4871988,0.4871009,0.4872169,0.4871832,0.4872375,0.4872413,0.4872781,0.4872119,0.4873133,0.4872456,0.4872620,0.4873402,0.4872771,0.4873549,0.4873352,0.4873516,0.4873855,0.4873983,0.4873852,0.4874347,0.4874408,0.4874801,0.4874445,0.4874762,0.4874768,0.4874875,0.4875674,0.4875156,0.4875059,0.4875238,0.4875492,0.4875914,0.4875539,0.4876116,0.4875845,0.4875950,0.4877010,0.4876195,0.4876437,0.4876786,0.4876328,0.4876528,0.4877358,0.4877323,0.4877554,0.4877536,0.4877961,0.4877611,0.4877441,0.4877485,0.4878036,0.4877792,0.4878055,0.4878021,0.4878131,0.4878669,0.4878280,0.4878822,0.4878469,0.4879035,0.4878759,0.4878931,0.4878834,0.4879565,0.4879330,0.4879810,0.4880112,0.4879769,0.4880187,0.4879765,0.4880021,0.4880861,0.4879991,0.4880276,0.4880580,0.4880611,0.4880634,0.4881080,0.4880820,0.4881012,0.4880688,0.4881104,0.4881022,0.4881403,0.4881725,0.4882078,0.4881945,0.4881901,0.4882043,0.4881785,0.4882522,0.4881943,0.4882493,0.4882287,0.4882918,0.4882712,0.4883016,0.4883045,0.4883119,0.4883036,0.4883274,0.4883490,0.4883107,0.4883928,0.4883342,0.4883724,0.4884524,0.4883847,0.4884447,0.4884678,0.4884460,0.4884335,0.4884308,0.4884723,0.4885001,0.4884529,0.4885120,0.4885331,0.4885090,0.4884690,0.4885272,0.4885142,0.4885077,0.4886142,0.4885210,0.4885199,0.4885837,0.4886070,0.4886224,0.4885843,0.4885907,0.4886212,0.4886290,0.4886097,0.4886647,0.4886704,0.4886614,0.4887053,0.4886942,0.4887070,0.4886731,0.4887080,0.4887255,0.4887332,0.4887517,0.4887136,0.4887389,0.4887660,0.4888079,0.4888012,0.4887925,0.4887834,0.4887842,0.4888345,0.4888520,0.4888400,0.4888530,0.4888441,0.4888490,0.4888874,0.4888929,0.4888561,0.4889170,0.4888988,0.4888790,0.4889620,0.4889278,0.4889286,0.4889221,0.4889495,0.4889905,0.4889579,0.4889746,0.4889785,0.4890183,0.4890192,0.4890429,0.4890988,0.4890781,0.4890610,0.4890606,0.4890027,0.4890856,0.4890764,0.4890601,0.4890874,0.4890838,0.4891142,0.4891215,0.4891341,0.4891535,0.4891825,0.4891504,0.4891619,0.4891701,0.4891323,0.4891712,0.4891969,0.4891714,0.4892370,0.4891607,0.4892094,0.4892222,0.4892034,0.4891960,0.4892394,0.4892490,0.4892399,0.4892512,0.4892992,0.4892481,0.4892766,0.4893145,0.4893067,0.4893279,0.4893178,0.4892995,0.4893611,0.4892770,0.4893599,0.4893629,0.4893708,0.4893928,0.4893523,0.4893760,0.4893727,0.4894260,0.4894239,0.4893979,0.4894045,0.4894454,0.4894478,0.4894165,0.4895016,0.4894712,0.4895134,0.4894884,0.4895128,0.4894514,0.4895076,0.4895041,0.4895272,0.4895599,0.4895195,0.4895534,0.4895285,0.4895697,0.4895547,0.4896141,0.4895660,0.4896050,0.4896126,0.4896018,0.4895994,0.4895783,0.4896115,0.4895824,0.4896511,0.4896318,0.4896348,0.4896270,0.4897036,0.4896518,0.4896423,0.4896786,0.4896615,0.4897154,0.4896881,0.4896830,0.4897435,0.4896841,0.4896969,0.4897630,0.4897552,0.4897640,0.4897365,0.4897269,0.4898003,0.4898223,0.4897712,0.4898054,0.4898316,0.4898190,0.4897829,0.4898479,0.4897775,0.4898339,0.4898212,0.4898568,0.4899146,0.4898037,0.4898687,0.4898944,0.4898752,0.4898858,0.4898959,0.4899580,0.4899116,0.4899031,0.4899205,0.4898699,0.4899284,0.4899485,0.4899540,0.4899966,0.4900017,0.4900099,0.4899591,0.4900096,0.4899591,0.4899879,0.4899798,0.4899615,0.4899912,0.4900193,0.4900096,0.4900189,0.4900434,0.4900307,0.4900820,0.4900595,0.4900498,0.4900777,0.4900936,0.4901016,0.4900789,0.4900822,0.4901341,0.4901060,0.4901046,0.4900828,0.4901155,0.4901344,0.4901422,0.4900945,0.4901526,0.4901668,0.4901917,0.4902333,0.4901497,0.4901425,0.4901646,0.4901777,0.4901992,0.4901663,0.4902497,0.4902079,0.4902122,0.4902555,0.4901933,0.4902352,0.4902801,0.4902003,0.4902091,0.4902569,0.4902539,0.4902936,0.4902347,0.4902631,0.4902875,0.4902282,0.4902738,0.4902970,0.4902750,0.4903323,0.4902863,0.4903123,0.4903809,0.4903392,0.4902875,0.4903412,0.4903511,0.4903306,0.4903812,0.4903941,0.4903796,0.4904251,0.4903508,0.4903992,0.4903909,0.4904166,0.4904144,0.4904342,0.4904108,0.4904009,0.4904398,0.4904028,0.4904745,0.4904547,0.4904575,0.4905129,0.4904692,0.4904309,0.4904506,0.4904590,0.4905017,0.4904600,0.4904674,0.4905330,0.4905092,0.4905130,0.4905337,0.4905151,0.4905145,0.4905025,0.4905469,0.4905638,0.4905482,0.4905278,0.4905774,0.4905839,0.4905619,0.4905551,0.4905923,0.4905826,0.4905885,0.4905620,0.4905707,0.4905841,0.4906097,0.4905970,0.4906294,0.4905995,0.4906354,0.4906211,0.491,0.491,0.491};

  
  struct BiallelicVariant {
    uint32_t pos;
    char ref;
    char alt;

    explicit BiallelicVariant(uint32_t const p) : pos(p), ref('N'), alt('N') {}
    BiallelicVariant(uint32_t const p, char const r, char const a) : pos(p), ref(r), alt(a) {}
  };

  struct BiallelicSupport {
    uint32_t pos;
    uint16_t ref;
    uint16_t alt;
    explicit BiallelicSupport(uint32_t const p) : pos(p), ref(0), alt(0) {}
    BiallelicSupport(uint32_t const p, uint16_t const r, uint16_t const a) : pos(p), ref(r), alt(a) {}
  };
  
  template<typename TRecord>
  struct SortVariants : public std::binary_function<TRecord, TRecord, bool> {
    inline bool operator()(TRecord const& s1, TRecord const& s2) const {
      return s1.pos < s2.pos;
    }
  };

  template<typename TVarSupport>
  inline std::pair<int32_t, int32_t>
  mafSegmentSum(uint32_t const s, uint32_t const e, TVarSupport const& vs, int32_t& numSnps) {
    numSnps = 0;
    int32_t a1 = 0;
    int32_t a2 = 0;
    if ((!vs.empty()) && (s < e)) {
      // Collect MAF sum
      typename TVarSupport::const_iterator vIt = std::lower_bound(vs.begin(), vs.end(), BiallelicSupport(s), SortVariants<BiallelicSupport>());
      typename TVarSupport::const_iterator vItEnd = std::upper_bound(vs.begin(), vs.end(), BiallelicSupport(e), SortVariants<BiallelicSupport>());
      if ((vIt != vs.end()) && (vIt != vItEnd)) {
	for(;vIt != vItEnd; ++vIt) {
	  if ((vIt->pos >= s) && (vIt->pos < e)) {
	    if (vIt->alt < vIt->ref) {
	      a1 += vIt->alt;
	      a2 += vIt->ref;
	    } else {
	      a1 += vIt->ref;
	      a2 += vIt->alt;
	    }
	    ++numSnps;
	  }
	}
      }
    }
    return std::make_pair(a1, a2);
  }
  
  template<typename TConfig, typename TVarSupport>
  inline double
  mafSegment(TConfig const& c, uint32_t const s, uint32_t const e, TVarSupport const& cs, TVarSupport const& ts) {
    typedef std::pair<int32_t, int32_t> TAlleleSupport;
    int32_t numTSnps = 0;
    TAlleleSupport tumor = mafSegmentSum(s, e, ts, numTSnps);
    if (c.hasControlFile) {
      int32_t numCSnps = 0;
      TAlleleSupport control = mafSegmentSum(s, e, cs, numCSnps);
      if ((tumor.first + tumor.second >= c.minCoverage) && (control.first + control.second >= c.minCoverage)) {
	double tMaf = (double) tumor.first / (double) (tumor.first + tumor.second);
	double cMaf = (double) control.first / (double) (control.first + control.second);
	if ((cMaf > 0) && (numTSnps >= c.minSnps)) return tMaf / cMaf;
      }
    } else {
      // Tumor-only
      if (tumor.first + tumor.second >= c.minCoverage) {
	double tMaf = (double) tumor.first / (double) (tumor.first + tumor.second);
	int32_t avgcov = (tumor.first + tumor.second) / numTSnps;
	double cMaf = 0.491;
	if (avgcov < 1000) cMaf = expmafnocontrol[avgcov];
	if ((cMaf > 0) && (numTSnps >= c.minSnps)) return tMaf / cMaf;
      }
    }
    return -1;
  }

  template<typename TVariants>
  inline bool
  _loadVariants(htsFile* ifile, hts_idx_t* bcfidx, bcf_hdr_t* hdr, std::string const& sample, std::string const& chrom, TVariants& pV) {
    typedef typename TVariants::value_type TVariant;

    // Get sample index (if present)
    int32_t sampleIndex = -1;
    for (int i = 0; i < bcf_hdr_nsamples(hdr); ++i)
      if (hdr->samples[i] == sample) sampleIndex = i;
        
    // Genotypes
    int ngt = 0;
    int32_t* gt = NULL;

    // Collect het. bi-allelic variants for this chromosome
    int32_t chrid = bcf_hdr_name2id(hdr, chrom.c_str());
    int32_t lastpos = -1;
    if (chrid < 0) return false;
    hts_itr_t* itervcf = bcf_itr_querys(bcfidx, hdr, chrom.c_str());
    if (itervcf != NULL) {
      bcf1_t* rec = bcf_init1();
      while (bcf_itr_next(ifile, itervcf, rec) >= 0) {
	// Only bi-allelic variants
	if (rec->n_allele == 2) {
	  bcf_unpack(rec, BCF_UN_ALL);
	  bcf_get_genotypes(hdr, rec, &gt, &ngt);
	  bool includeVar = false;
	  if (sampleIndex != -1) {
	    if ((bcf_gt_allele(gt[sampleIndex*2]) != -1) && (bcf_gt_allele(gt[sampleIndex*2 + 1]) != -1) && (!bcf_gt_is_missing(gt[sampleIndex*2])) && (!bcf_gt_is_missing(gt[sampleIndex*2 + 1]))) {
	      int gt_type = bcf_gt_allele(gt[sampleIndex*2]) + bcf_gt_allele(gt[sampleIndex*2 + 1]);
	      // Only het. variants
	      if (gt_type == 1) includeVar = true;
	    }
	  } else includeVar = true;
	  if (includeVar) {
	    if (rec->pos != lastpos) {
	      // Only one variant per position
	      std::string ref = boost::to_upper_copy(std::string(rec->d.allele[0]));
	      std::string alt = boost::to_upper_copy(std::string(rec->d.allele[1]));
	      // Only SNPs
	      if ((ref.size()==1) && (alt.size()==1) && (ref[0] != alt[0])) {
		pV.push_back(TVariant(rec->pos, ref[0], alt[0]));
		lastpos = rec->pos;
	      }
	    }
	  }
	}
      }
      bcf_destroy(rec);
      hts_itr_destroy(itervcf);
    }
    if (gt != NULL) free(gt);
    return true;
  }

}

#endif
